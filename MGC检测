#include<iostream>
#include<fstream>
#include<cstring>
#include<string.h>
#include<locale>
using namespace std;
//locale china("zh_CN.,UTF-8");
class Chart
{
	public:
	char noun[100];	
	int wide;
};

class Outport
{
	public:
		char anslin[400];
		char Mgc[100];
		int lineflag;
		
};


int main()
{
	ifstream inFile("C:\\Users\\E.s novel\\Desktop\\rng.txt");
	ifstream keyFile("C:\\Users\\E.s novel\\Desktop\\key.txt");
	ofstream outFile("C:\\Users\\E.s novel\\Desktop\\ans.txt");
	
	Chart map[20];//MGC表 
	
	char Line[1000],cache[100];
	string str;
	
	
	Outport  ans[1000];//存输出答案； 
	
	
	int i,k,begin,end,flag,num=0,Total=0,ilar,imid,inoun,icache,warning=0; 
	/*cout<<"Please intput Line:"<<endl;
	cin>>Line;*/
	/*(wchar_t*)Line; */
	
	/*cout<<"Please intput cache:"<<endl;
	cin>>cache;
	cout<<strlen(cache)<<endl;*/
	
/*	(wchar_t*)cache;*/

//先把文件MGC导入map[]MGC表
     for( i=0;;i++ )  
      {
      	getline(keyFile,str);
      	if(str.length()==0)
 	 	{
 	 		break;
		}
 	 	str.copy( map[num].noun, str.length(), 0 );
 	 	map[num].wide = str.length();
 	 	
 	 /*	outFile<<"input MGC: "<<map[num].noun<<"  and wide: "<<map[num].wide<<endl;*/
 	 	
 	 	num++;                       //记录有多少词 noun[] 
	  }
        /*outFile<<"Total num: "<<num<<endl;*/

    //for(1)Line循环( √) 
    for(ilar = 1 ; ; ilar++)
    {
    		
	
    
		    getline(inFile,str);
		    
		    if(str.length() == 0)
			{
				warning++;
				if(warning == 3)
				break;
			}
			else
			warning=0;
		    memset(Line, '\0', sizeof(Line));
		    str.copy( Line ,str.length(),0);    //Line[] 准备( √) 
			/*outFile<<"Line now: "<<Line<<endl;  */
		    //for(2)key循环( √) 
		    
		    
		    
		    for(imid = 0; imid < num; imid++)  
			 {
			 	   /* outFile<<"loading successful"<<endl;*/
			 	
			 	    strcpy(cache,map[imid].noun);
			 	   
							
						/*outFile<<"input MGC again: "<<map[imid].noun<<"  and wide: "<<map[imid].wide<<endl;
						outFile<<"cache now: "<< cache<<"    length of cache: "<<strlen(cache) <<endl;*/
					 	
				
				    	             
		
		//到这边，准备好Line[], cache[] 
					for( i=0,k=0,begin=0,end=0,flag=0; i<strlen(Line)-1; i++ )
					{
						
						if(Line[i]==cache[k])
						{
						/*	cout<<"ex: "<<i<<" "<<k<<endl;*/
							
							if(!flag) //头 
								begin=i,flag=1,k++;
						
							else
								{
									if(k==strlen(cache)-1)//尾 
										{
											end = i;
											break;
										}
									else             //中间 
										k++;			
										
													
								}
							
						}
						
						
					}
					                     
					if(begin&end | (end) )    
					{
						                                       //输出答案的格式存入需要准备好ansline[]<-->Line[be 2 end];
															   // lineflag<--> ilar;  Mgc[]<-->cache[]
					/*	cout<<begin<<" "<<end<<endl;*/
						
						for(int j = begin, o=0; j<=end; j++,o++)
						ans[Total].anslin[o] = Line[j]; 
						
						ans[Total].lineflag = ilar;
						strcpy( ans[Total].Mgc, cache );
						Total++;
						
					}
			        
			 }
			 
			 
			 
			 
			 
	}
	
	outFile<<"Total: "<<Total<<endl;
	
	for(i=0; i<Total; i++)
	{
		outFile<<"Line"<<ans[i].lineflag<<": <"<<ans[i].Mgc<<"> "<<ans[i].anslin<<endl;
	}
	inFile.close();
	keyFile.close();
    outFile.close();	
	
	return 0;
}
